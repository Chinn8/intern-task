# Movie Database Application

A full-stack movie database application built with Node.js/Express backend and React frontend. The application allows users to browse movies, directors, and actors with search functionality and detailed movie information.

## Features

### Backend Features
- **Movies API** with pagination and sorting
- **Directors API** with pagination
- **Cast/Actors API** with pagination
- **Movie Details** by ID
- **Comments** for each movie
- **Search functionality** by title, plot, cast, and genre (top 20 matches)

### Frontend Features
- **Homepage** with latest 20 movies and pagination
- **Search bar** for finding movies
- **Navigation** between Movies, Directors, and Actors pages
- **Movie detail modal** with comprehensive information
- **Responsive design** with modern UI

## Tech Stack

**Backend:**
- Node.js
- Express.js
- MongoDB with Mongoose
- CORS enabled
- Text search indexing

**Frontend:**
- React 18
- Tailwind CSS
- Lucide React icons
- Responsive design

## Project Structure

```
movie-app/
├── backend/
│   ├── server.js
│   ├── package.json
│   └── .env
├── frontend/
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   └── index.css
│   ├── package.json
│   └── tailwind.config.js
└── README.md
```

## Setup Instructions

### Prerequisites
- Node.js (v14 or higher)
- MongoDB (local installation or MongoDB Atlas)
- Git

### Backend Setup

1. **Clone the repository and navigate to backend:**
```bash
git clone <repository-url>
cd movie-app/backend
```

2. **Install dependencies:**
```bash
npm install
```

3. **Create .env file:**
```bash
# Copy the .env content provided
MONGODB_URI=mongodb://localhost:27017/movies
PORT=5000
```

4. **Start MongoDB** (if using local installation):
```bash
mongod
```

5. **Start the backend server:**
```bash
npm run dev
# or
npm start
```

The backend will run on `http://localhost:5000`

### Frontend Setup

1. **Navigate to frontend directory:**
```bash
cd ../frontend
```

2. **Install dependencies:**
```bash
npm install
```

3. **Install Tailwind CSS:**
```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

4. **Start the frontend development server:**
```bash
npm start
```

The frontend will run on `http://localhost:3000`

### Database Setup

The application expects two MongoDB collections:

1. **movies** - Contains movie documents with the provided schema
2. **comments** - Contains comment documents linked to movies

#### Sample Data Structure

**Movie Document:**
```javascript
{
  title: "Movie Title",
  plot: "Short plot description",
  fullplot: "Full plot description",
  year: 2023,
  cast: ["Actor 1", "Actor 2"],
  directors: ["Director 1"],
  genres: ["Action", "Drama"],
  runtime: 120,
  imdb: { rating: 7.5, votes: 10000 },
  poster: "image-url",
  // ... other fields
}
```

**Comment Document:**
```javascript
{
  name: "User Name",
  email: "user@example.com",
  movie_id: ObjectId("movie-id"),
  text: "Comment text",
  date: new Date()
}
```

## API Endpoints

### Movies
- `GET /api/movies` - Get movies with pagination and sorting
  - Query params: `page`, `limit`, `sort`, `order`
- `GET /api/movies/:id` - Get movie by ID
- `GET /api/movies/:id/comments` - Get comments for a movie

### Directors & Cast
- `GET /api/directors` - Get directors with pagination
- `GET /api/cast` - Get actors with pagination

### Search
- `GET /api/search?q=query` - Search movies (top 20 results)

## Usage

1. **Browse Movies:** The homepage shows the latest 20 movies with pagination
2. **Search:** Use the search bar to find movies by title, plot, cast, or genre
3. **View Details:** Click on any movie to see detailed information in a modal
4. **Navigate:** Use the header navigation to browse Directors and Actors
5. **Comments:** View comments for each movie in the detail modal

## MongoDB Text Search Setup

For search functionality to work properly, create a text index on the movies collection:

```javascript
db.movies.createIndex({
  title: "text",
  fullplot: "text",
  cast: "text",
  genres: "text"
})
```

## Production Deployment

### Backend Deployment
1. Set environment variables in your hosting platform
2. Update MONGODB_URI for production database
3. Deploy to platforms like Heroku, Railway, or DigitalOcean

### Frontend Deployment
1. Update API base URL in the frontend code
2. Build the React app: `npm run build`
3. Deploy to platforms like Netlify, Vercel, or serve from your backend

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## License

This project is licensed under the MIT License.

## Contact

For questions or issues, contact: surajtiwari020@gmail.com

---

**Note:** Make sure to populate your MongoDB database with movie and comment data before running the application for full functionality.